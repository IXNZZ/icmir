use std::fs::File;
use std::io::{BufReader, Read, Seek, SeekFrom};
use bytes::Buf;
use flate2::{FlushDecompress, Status};
use tracing::{debug, info, warn};
use crate::data::color::PALETTE;

pub struct ImageData {
    pub width: u16,
    pub height: u16,
    pub offset_x: i16,
    pub offset_y: i16,
    pub bytes: Vec<u8>,
}

impl ImageData {
    pub fn from(src: &[u8]) -> Self {
        let mut body = src;
        let pixel = body.get_u8();
        let _compress = body.get_u8();
        let _reserve = body.get_u8();
        let _compress_level = body.get_u8();

        let width = body.get_u16_le();
        let height = body.get_u16_le();
        let offset_x = body.get_i16_le();
        let offset_y = body.get_i16_le();
        let length = body.get_u32_le();

        if length == 0 {
            Self { width, height, offset_x, offset_y, bytes: Vec::new() }
        } else {
            let x = &body[..length as usize];
            let x = deflate_image(x, width as u32 * height as u32);
            let bytes = byte_to_rgb(pixel, &x[..]);
            debug!("S3 length: {}, w: {}, h: {}, pixel: {}, x: {}, bytes: {}", length, width, height, pixel, x.len(), bytes.len());
            Self { width, height, offset_x, offset_y, bytes }
        }
    }
}

pub fn load_image(path: &str, start: u32, end: u32) -> ImageData {
    debug!("S1 start: {}, end: {}, len: {}, path: {}", start, end, end - start, path);
    let file = File::open(path).unwrap();
    let mut reader = BufReader::new(file);
    let mut data = vec![0;(end - start) as usize];
    reader.seek(SeekFrom::Start(start as u64)).unwrap();
    reader.read(&mut data[..]).unwrap();
    ImageData::from(&data[..])
}

pub fn load_index(path: &str) -> Vec<u32> {
    info!("load_index {}", path);
    let mut file = File::open(path).unwrap();
    let len = file.metadata().unwrap().len();
    let mut data = Vec::with_capacity(len as usize);
    file.read_to_end(&mut data).unwrap();
    let mut data = &data[..];
    let mut result = Vec::with_capacity(len as usize / 4);
    let len = data.len() / 4;
    for _ in 0..len {
        result.push(data.get_u32_le());
    }
    result
}

fn deflate_image(input: &[u8], size: u32) -> Vec<u8> {
    let capacity = size * 4;
    let mut rs: Vec<u8> = Vec::with_capacity(capacity as usize);
    let status = flate2::Decompress::new(true).decompress_vec(input, &mut rs, FlushDecompress::Finish).unwrap();
    if status != Status::StreamEnd {
        warn!("input: {}, output: {}, status: {:?}, size: {}, size*2: {}", input.len(), rs.len(), status, size, size *2);
    }
    rs
}

fn byte_to_rgb(pixel: u8, bytes: &[u8]) -> Vec<u8> {
    if pixel == 3 {
        let mut result = Vec::with_capacity(bytes.len() * 3);
        for b in bytes {
            let x = &PALETTE[*b as usize];
            result.push(x.0);
            result.push(x.1);
            result.push(x.2);
        }
        return result;
    }
    let mut result = Vec::with_capacity(bytes.len() / 2 * 3);
    // debug!("S2 old: {}, new: {}", bytes.len(), bytes.len() / 2 * 3);
    for x in 0..bytes.len() {
        if x % 2 == 0 {
            if x + 1 >= bytes.len() { break; }
            result.push(bytes[x] & 0xF8);
            result.push(((bytes[x] & 0x07) << 3) + ((bytes[x+ 1] & 0xE0) >> 5));
            result.push(bytes[x + 1] & 0x1F);
        }
    }
    result
}

mod color {
    pub struct Color(pub u8, pub u8, pub u8);

    pub const PALETTE: [Color; 256] = [
        Color(0x00, 0x00, 0x00),
        Color(0x00, 0x00, 0x80),
        Color(0x00, 0x80, 0x00),
        Color(0x00, 0x80, 0x80),
        Color(0x80, 0x00, 0x00),
        Color(0x80, 0x00, 0x80),
        Color(0x80, 0x80, 0x00),
        Color(0xC0, 0xC0, 0xC0),
        Color(0x97, 0x80, 0x55),
        Color(0xC8, 0xB9, 0x9D),
        Color(0x73, 0x73, 0x7B),
        Color(0x29, 0x29, 0x2D),
        Color(0x52, 0x52, 0x5A),
        Color(0x5A, 0x5A, 0x63),
        Color(0x39, 0x39, 0x42),
        Color(0x18, 0x18, 0x1D),
        Color(0x10, 0x10, 0x18),
        Color(0x18, 0x18, 0x29),
        Color(0x08, 0x08, 0x10),
        Color(0x71, 0x79, 0xF2),
        Color(0x5F, 0x67, 0xE1),
        Color(0x5A, 0x5A, 0xFF),
        Color(0x31, 0x31, 0xFF),
        Color(0x52, 0x5A, 0xD6),
        Color(0x00, 0x10, 0x94),
        Color(0x18, 0x29, 0x94),
        Color(0x00, 0x08, 0x39),
        Color(0x00, 0x10, 0x73),
        Color(0x00, 0x18, 0xB5),
        Color(0x52, 0x63, 0xBD),
        Color(0x10, 0x18, 0x42),
        Color(0x99, 0xAA, 0xFF),
        Color(0x00, 0x10, 0x5A),
        Color(0x29, 0x39, 0x73),
        Color(0x31, 0x4A, 0xA5),
        Color(0x73, 0x7B, 0x94),
        Color(0x31, 0x52, 0xBD),
        Color(0x10, 0x21, 0x52),
        Color(0x18, 0x31, 0x7B),
        Color(0x10, 0x18, 0x2D),
        Color(0x31, 0x4A, 0x8C),
        Color(0x00, 0x29, 0x94),
        Color(0x00, 0x31, 0xBD),
        Color(0x52, 0x73, 0xC6),
        Color(0x18, 0x31, 0x6B),
        Color(0x42, 0x6B, 0xC6),
        Color(0x00, 0x4A, 0xCE),
        Color(0x39, 0x63, 0xA5),
        Color(0x18, 0x31, 0x5A),
        Color(0x00, 0x10, 0x2A),
        Color(0x00, 0x08, 0x15),
        Color(0x00, 0x18, 0x3A),
        Color(0x00, 0x00, 0x08),
        Color(0x00, 0x00, 0x29),
        Color(0x00, 0x00, 0x4A),
        Color(0x00, 0x00, 0x9D),
        Color(0x00, 0x00, 0xDC),
        Color(0x00, 0x00, 0xDE),
        Color(0x00, 0x00, 0xFB),
        Color(0x52, 0x73, 0x9C),
        Color(0x4A, 0x6B, 0x94),
        Color(0x29, 0x4A, 0x73),
        Color(0x18, 0x31, 0x52),
        Color(0x18, 0x4A, 0x8C),
        Color(0x11, 0x44, 0x88),
        Color(0x00, 0x21, 0x4A),
        Color(0x10, 0x18, 0x21),
        Color(0x5A, 0x94, 0xD6),
        Color(0x21, 0x6B, 0xC6),
        Color(0x00, 0x6B, 0xEF),
        Color(0x00, 0x77, 0xFF),
        Color(0x84, 0x94, 0xA5),
        Color(0x21, 0x31, 0x42),
        Color(0x08, 0x10, 0x18),
        Color(0x08, 0x18, 0x29),
        Color(0x00, 0x10, 0x21),
        Color(0x18, 0x29, 0x39),
        Color(0x39, 0x63, 0x8C),
        Color(0x10, 0x29, 0x42),
        Color(0x18, 0x42, 0x6B),
        Color(0x18, 0x4A, 0x7B),
        Color(0x00, 0x4A, 0x94),
        Color(0x7B, 0x84, 0x8C),
        Color(0x5A, 0x63, 0x6B),
        Color(0x39, 0x42, 0x4A),
        Color(0x18, 0x21, 0x29),
        Color(0x29, 0x39, 0x46),
        Color(0x94, 0xA5, 0xB5),
        Color(0x5A, 0x6B, 0x7B),
        Color(0x94, 0xB1, 0xCE),
        Color(0x73, 0x8C, 0xA5),
        Color(0x5A, 0x73, 0x8C),
        Color(0x73, 0x94, 0xB5),
        Color(0x73, 0xA5, 0xD6),
        Color(0x4A, 0xA5, 0xEF),
        Color(0x8C, 0xC6, 0xEF),
        Color(0x42, 0x63, 0x7B),
        Color(0x39, 0x56, 0x6B),
        Color(0x5A, 0x94, 0xBD),
        Color(0x00, 0x39, 0x63),
        Color(0xAD, 0xC6, 0xD6),
        Color(0x29, 0x42, 0x52),
        Color(0x18, 0x63, 0x94),
        Color(0xAD, 0xD6, 0xEF),
        Color(0x63, 0x8C, 0xA5),
        Color(0x4A, 0x5A, 0x63),
        Color(0x7B, 0xA5, 0xBD),
        Color(0x18, 0x42, 0x5A),
        Color(0x31, 0x8C, 0xBD),
        Color(0x29, 0x31, 0x35),
        Color(0x63, 0x84, 0x94),
        Color(0x4A, 0x6B, 0x7B),
        Color(0x5A, 0x8C, 0xA5),
        Color(0x29, 0x4A, 0x5A),
        Color(0x39, 0x7B, 0x9C),
        Color(0x10, 0x31, 0x42),
        Color(0x21, 0xAD, 0xEF),
        Color(0x00, 0x10, 0x18),
        Color(0x00, 0x21, 0x29),
        Color(0x00, 0x6B, 0x9C),
        Color(0x5A, 0x84, 0x94),
        Color(0x18, 0x42, 0x52),
        Color(0x29, 0x5A, 0x6B),
        Color(0x21, 0x63, 0x7B),
        Color(0x21, 0x7B, 0x9C),
        Color(0x00, 0xA5, 0xDE),
        Color(0x39, 0x52, 0x5A),
        Color(0x10, 0x29, 0x31),
        Color(0x7B, 0xBD, 0xCE),
        Color(0x39, 0x5A, 0x63),
        Color(0x4A, 0x84, 0x94),
        Color(0x29, 0xA5, 0xC6),
        Color(0x18, 0x9C, 0x10),
        Color(0x4A, 0x8C, 0x42),
        Color(0x42, 0x8C, 0x31),
        Color(0x29, 0x94, 0x10),
        Color(0x10, 0x18, 0x08),
        Color(0x18, 0x18, 0x08),
        Color(0x10, 0x29, 0x08),
        Color(0x29, 0x42, 0x18),
        Color(0xAD, 0xB5, 0xA5),
        Color(0x73, 0x73, 0x6B),
        Color(0x29, 0x29, 0x18),
        Color(0x4A, 0x42, 0x18),
        Color(0x4A, 0x42, 0x31),
        Color(0xDE, 0xC6, 0x63),
        Color(0xFF, 0xDD, 0x44),
        Color(0xEF, 0xD6, 0x8C),
        Color(0x39, 0x6B, 0x73),
        Color(0x39, 0xDE, 0xF7),
        Color(0x8C, 0xEF, 0xF7),
        Color(0x00, 0xE7, 0xF7),
        Color(0x5A, 0x6B, 0x6B),
        Color(0xA5, 0x8C, 0x5A),
        Color(0xEF, 0xB5, 0x39),
        Color(0xCE, 0x9C, 0x4A),
        Color(0xB5, 0x84, 0x31),
        Color(0x6B, 0x52, 0x31),
        Color(0xD6, 0xDE, 0xDE),
        Color(0xB5, 0xBD, 0xBD),
        Color(0x84, 0x8C, 0x8C),
        Color(0xDE, 0xF7, 0xF7),
        Color(0x18, 0x08, 0x00),
        Color(0x39, 0x18, 0x08),
        Color(0x29, 0x10, 0x08),
        Color(0x00, 0x18, 0x08),
        Color(0x00, 0x29, 0x08),
        Color(0xA5, 0x52, 0x00),
        Color(0xDE, 0x7B, 0x00),
        Color(0x4A, 0x29, 0x10),
        Color(0x6B, 0x39, 0x10),
        Color(0x8C, 0x52, 0x10),
        Color(0xA5, 0x5A, 0x21),
        Color(0x5A, 0x31, 0x10),
        Color(0x84, 0x42, 0x10),
        Color(0x84, 0x52, 0x31),
        Color(0x31, 0x21, 0x18),
        Color(0x7B, 0x5A, 0x4A),
        Color(0xA5, 0x6B, 0x52),
        Color(0x63, 0x39, 0x29),
        Color(0xDE, 0x4A, 0x10),
        Color(0x21, 0x29, 0x29),
        Color(0x39, 0x4A, 0x4A),
        Color(0x18, 0x29, 0x29),
        Color(0x29, 0x4A, 0x4A),
        Color(0x42, 0x7B, 0x7B),
        Color(0x4A, 0x9C, 0x9C),
        Color(0x29, 0x5A, 0x5A),
        Color(0x14, 0x42, 0x42),
        Color(0x00, 0x39, 0x39),
        Color(0x00, 0x59, 0x59),
        Color(0x2C, 0x35, 0xCA),
        Color(0x21, 0x73, 0x6B),
        Color(0x00, 0x31, 0x29),
        Color(0x10, 0x39, 0x31),
        Color(0x18, 0x39, 0x31),
        Color(0x00, 0x4A, 0x42),
        Color(0x18, 0x63, 0x52),
        Color(0x29, 0x73, 0x5A),
        Color(0x18, 0x4A, 0x31),
        Color(0x00, 0x21, 0x18),
        Color(0x00, 0x31, 0x18),
        Color(0x10, 0x39, 0x18),
        Color(0x4A, 0x84, 0x63),
        Color(0x4A, 0xBD, 0x6B),
        Color(0x4A, 0xB5, 0x63),
        Color(0x4A, 0xBD, 0x63),
        Color(0x4A, 0x9C, 0x5A),
        Color(0x39, 0x8C, 0x4A),
        Color(0x4A, 0xC6, 0x63),
        Color(0x4A, 0xD6, 0x63),
        Color(0x4A, 0x84, 0x52),
        Color(0x29, 0x73, 0x31),
        Color(0x5A, 0xC6, 0x63),
        Color(0x4A, 0xBD, 0x52),
        Color(0x00, 0xFF, 0x10),
        Color(0x18, 0x29, 0x18),
        Color(0x4A, 0x88, 0x4A),
        Color(0x4A, 0xE7, 0x4A),
        Color(0x00, 0x5A, 0x00),
        Color(0x00, 0x88, 0x00),
        Color(0x00, 0x94, 0x00),
        Color(0x00, 0xDE, 0x00),
        Color(0x00, 0xEE, 0x00),
        Color(0x00, 0xFB, 0x00),
        Color(0x94, 0x5A, 0x4A),
        Color(0xB5, 0x73, 0x63),
        Color(0xD6, 0x8C, 0x7B),
        Color(0xD6, 0x7B, 0x6B),
        Color(0xFF, 0x88, 0x77),
        Color(0xCE, 0xC6, 0xC6),
        Color(0x9C, 0x94, 0x94),
        Color(0xC6, 0x94, 0x9C),
        Color(0x39, 0x31, 0x31),
        Color(0x84, 0x18, 0x29),
        Color(0x84, 0x00, 0x18),
        Color(0x52, 0x42, 0x4A),
        Color(0x7B, 0x42, 0x52),
        Color(0x73, 0x5A, 0x63),
        Color(0xF7, 0xB5, 0xCE),
        Color(0x9C, 0x7B, 0x8C),
        Color(0xCC, 0x22, 0x77),
        Color(0xFF, 0xAA, 0xDD),
        Color(0x2A, 0xB4, 0xF0),
        Color(0x9F, 0x00, 0xDF),
        Color(0xB3, 0x17, 0xE3),
        Color(0xF0, 0xFB, 0xFF),
        Color(0xA4, 0xA0, 0xA0),
        Color(0x80, 0x80, 0x80),
        Color(0x00, 0x00, 0xFF),
        Color(0x00, 0xFF, 0x00),
        Color(0x00, 0xFF, 0xFF),
        Color(0xFF, 0x00, 0x00),
        Color(0xFF, 0x00, 0xFF),
        Color(0xFF, 0xFF, 0x00),
        Color(0xFF, 0xFF, 0xFF),
    ];
}